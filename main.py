"""
This code implements a Streamlit application for interacting with a COVID-19 FAQ chatbot.

1. **Imports**:
   - The Streamlit library (`streamlit as st`) is imported for creating the web interface, and the chatbot module (`chatbot as cbt`) is imported for chatbot functionality.

2. **Streamlit App Creation**:
   - The `create_stramlit_app()` function is defined to build the user interface of the chatbot.
   - Two images are displayed: a chatbot logo and a COVID-related image, along with a title "Covid-ChatBot".

3. **User Input**:
   - A text input field is created using `st.text_input()` for users to enter their queries.
   - JavaScript is injected to disable the browser's autocomplete feature for the input field.

4. **Submit Button**:
   - A submit button is created with `st.button("Submit")` to allow users to send their queries to the chatbot.

5. **Response Handling**:
   - A placeholder is created to display the chatbot's response.
   - When the submit button is clicked, the app enters a spinner state to indicate processing.
   - The chatbot's response is generated by calling the `chat_with_me()` function from the chatbot module, and the result is displayed in the response placeholder.
   - If an error occurs during processing, an error message is displayed.

6. **Initialization**:
   - The `create_vector_db()` function from the chatbot module is called to ensure that the vector database is created or loaded before launching the Streamlit application.

Overall, this code provides a user-friendly web interface for users to interact with a COVID-19 FAQ chatbot, enabling them to ask questions and receive responses in real time.
"""

import streamlit as st
import chatbot as cbt

def create_stramlit_app():
    st.image("/home/akhil/Downloads/chatbot.png", width=40)
    st.image("/home/akhil/Downloads/covid.jpg", width=100)
    st.title("Covid-ChatBot")

    # Use st.markdown to inject custom HTML for the input field with autocomplete off
    query_input = st.text_input("Enter Your Query", value="", key="input_field")

    # Use JS to disable autocomplete for the input field
    st.markdown("""
        <script>
        document.getElementById('input_field').autocomplete = "off";
        </script>
    """, unsafe_allow_html=True)

    submit_button = st.button("Submit")

    response_placeholder = st.empty()

    if submit_button:
        try:
            with st.spinner('Waiting...'):
                # time.sleep(1)  # Optional delay to simulate processing
                # output = cbt.chat_with_me(query_input)
                chain = cbt.chat_with_me()
                data = chain({"query": query_input})
                output = data['result']
            response_placeholder.markdown(f"### Response\n\n{output}")
        except Exception as e:
            st.error(f"An Error Occurred: {e}")

if __name__ == "__main__":
    cbt.create_vector_db()
    create_stramlit_app()